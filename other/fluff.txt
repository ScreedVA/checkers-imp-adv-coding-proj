rows(i // 4) / columns (i % 4) i -> 32
0 0
0 1
0 2
0 3
1 0
1 1
1 2
1 3
2 0
2 1
2 2
2 3
3 0
3 1
3 2
3 3
4 0
4 1
4 2
4 3
5 0
5 1
5 2
5 3
6 0
6 1
6 2
6 3
7 0
7 1
7 2
7 3


if (row == 0 or 2 or 4 or 6)
rect.left = {
    0: 600 - (0 * 200) = 600
    1: 600 - (1 * 200) = 400
    2: 600 - (2 * 200) = 200
    3: 600 - (3 * 200) = 0
}

rect.top = {
    0: 0 * 100 = 0
    2: 2 * 100 = 200
    4: 4 * 100 = 400
    6: 6 * 100 = 600
}


if (row == 1, or 3, or 5, or 7)
rect.left = {
    0: 700 - (0 * 200) = 700
    1: 700 - (1 * 200) = 500
    2: 700 - (2 * 200) = 300
    3: 700 - (3 * 200) = 100
}

rect.top {
    0: 1 * 100
    0: 3 * 100
    0: 5 * 100
    0: 7 * 100
}



# Draw pieces
index as i -> len(white_pieces)

index = piece_list.index("rook") = 4
index = piece_list.index("knight") = 3
index = piece_list.index("bishop") = 5
index = piece_list.index("king") = 2
index = piece_list.index("queen") = 1
index = piece_list.index("bishop") = 5
index = piece_list.index("knight") = 3
index = piece_list.index("rook") = 4

index = piece_list.index("pawns") = 0
index = piece_list.index("pawns") = 0
index = piece_list.index("pawns") = 0
index = piece_list.index("pawns") = 0
index = piece_list.index("pawns") = 0
index = piece_list.index("pawns") = 0
index = piece_list.index("pawns") = 0
index = piece_list.index("pawns") = 0
index = piece_list.index("pawns") = 0


check_rook function(position = (0,0), color="white")
friends_list = [(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0),
                  (0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1),]
enemies_list = [(0, 7), (1, 7), (2, 7), (3, 7), (4, 7), (5, 7), (6, 7), (7, 7),
                  (0, 6), (1, 6), (2, 6), (3, 6), (4, 6), (5, 6), (6, 6), (7, 6),]
for i -> 3:

i = 0 {
    chain: 1
    x :0
    y: 1
}

-while path:
# First while iteration
--if (((0, 1)  not in friends_list) and \
 (0 <= 0 <= 7) and \ # check if x coord is within bound
 (0 <= 1 <= 7):   # check if y coord is in bound
moves_list.append(0, 1)
chain += 1
 ---if ((0, 1) in enemies_list
       path = False
 --else:
       path = False

i = 1 {
    chain: 1
    x: 0
    y: -1
}


i = 2 {
    chain: 1
    x: 1
    y: 0
}

i = 3 {
    chain: 1
    x: -1
    y: 0
}



















